# Build pipeline
name: maven-publish
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: push
          POSTGRES_PASSWORD: local
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name push_pgc
    env:
      PGHOST: localhost
      PGDATABASE: push
      PGUSER: push
      PGPASSWORD: local
      POSTGRES_USER: push
      POSTGRES_PASSWORD: local

    steps:
      - name: Install psql
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client

      # The default number of connections to Postgres is too small generating
      # org.postgresql.util.PSQLException: FATAL: sorry, too many clients already
      - name: Increase max_connections and shared_buffers
        run: |
          docker exec -i push_pgc bash << EOF
            sed -i -e 's/max_connections = 100/max_connections = 500/' /var/lib/postgresql/data/postgresql.conf
            sed -i -e 's/shared_buffers = 128MB/shared_buffers = 256MB/' /var/lib/postgresql/data/postgresql.conf
          EOF

      - name: Restart the container
        run: docker restart --time 0 push_pgc

      - name: Wait while the instance restarts
        run: sleep 5

      - name: Show max_connections value
        run: psql -c 'SHOW max_connections;'

      - name: Checkout branch to build
        uses: actions/checkout@v3

      - name: Set up JDK v11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'zulu'

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.USER_NAME }}
          password: ${{ secrets.ACCESS_TOKEN }}

      - name: Maven build and test
        run: mvn -PDB,DOCKER --batch-mode deploy -s $GITHUB_WORKSPACE/.github/workflows/maven-settings.xml
        env:
          USER_NAME: ${{ secrets.USER_NAME }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
